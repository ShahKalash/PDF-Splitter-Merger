<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>PDF Splitter & Merger</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.14.305/pdf.min.js"></script>
</head>

<body class="bg-gray-100 min-h-screen flex items-center justify-center">
    <div class="max-w-4xl w-full p-6 bg-white shadow-lg rounded-xl">
        <h1 class="text-2xl font-bold text-gray-800 mb-6">PDF Splitter & Merger</h1>
        <form id="upload-form" action="/upload" method="POST" enctype="multipart/form-data">
            <label for="pdfFiles" class="block text-sm font-medium text-gray-700 mb-2">Select PDF Files</label>
            <input type="file" id="pdfFiles" name="pdfFiles" accept="application/pdf" multiple
                class="w-full border rounded-md p-2 mb-4" />

            <div id="pdf-preview" class="grid grid-cols-2 gap-4 mb-4"></div>

            <input type="hidden" id="selectedPages" name="selectedPages" />

            <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
                Merge PDFs
            </button>
        </form>

        <div id="result" class="mt-6 hidden">
            <h2 class="text-xl font-semibold mb-2">Preview:</h2>
            <iframe id="previewFrame" class="w-full h-64 border" frameborder="0"></iframe>
            <a id="downloadLink" href="#" class="text-blue-500 underline mt-2 inline-block">Download Merged PDF</a>
        </div>
    </div>

    <script>
        document.getElementById("pdfFiles").addEventListener("change", function (e) {
            const files = e.target.files;
            const previewContainer = document.getElementById("pdf-preview");
            previewContainer.innerHTML = "";

            Array.from(files).forEach((file, fileIndex) => {
                const fileReader = new FileReader();
                fileReader.onload = function () {
                    const typedarray = new Uint8Array(this.result);

                    pdfjsLib.getDocument(typedarray).promise.then(pdf => {
                        for (let pageNum = 1; pageNum <= pdf.numPages; pageNum++) {
                            pdf.getPage(pageNum).then(page => {
                                const canvas = document.createElement("canvas");
                                const context = canvas.getContext("2d");
                                const viewport = page.getViewport({ scale: 0.5 });
                                canvas.height = viewport.height;
                                canvas.width = viewport.width;

                                const renderContext = {
                                    canvasContext: context,
                                    viewport: viewport
                                };
                                page.render(renderContext);

                                canvas.addEventListener("click", () => {
                                    canvas.classList.toggle("border-4");
                                    canvas.classList.toggle("border-blue-500");

                                    const selected = JSON.parse(document.getElementById("selectedPages").value || "[]");
                                    if (!selected[fileIndex]) selected[fileIndex] = [];

                                    const pageIndex = page.pageNumber - 1;
                                    const pageArray = selected[fileIndex];

                                    const index = pageArray.indexOf(pageIndex);
                                    if (index > -1) {
                                        pageArray.splice(index, 1);
                                    } else {
                                        pageArray.push(pageIndex);
                                    }

                                    document.getElementById("selectedPages").value = JSON.stringify(selected);
                                });

                                previewContainer.appendChild(canvas);
                            });
                        }
                    });
                };
                fileReader.readAsArrayBuffer(file);
            });
        });

        document.getElementById("upload-form").addEventListener("submit", async (e) => {
            e.preventDefault();
            const formData = new FormData(e.target);

            try {
                const response = await fetch("/upload", {
                    method: "POST",
                    body: formData,
                });

                if (!response.ok) throw new Error("Failed to merge PDFs.");

                const data = await response.json();
                const base64Pdf = data.base64Pdf;
                const blob = new Blob([Uint8Array.from(atob(base64Pdf), c => c.charCodeAt(0))], { type: 'application/pdf' });
                const url = URL.createObjectURL(blob);

                document.getElementById("previewFrame").src = url;
                document.getElementById("downloadLink").href = url;
                document.getElementById("downloadLink").download = "merged.pdf";

                document.getElementById("result").classList.remove("hidden");
            } catch (error) {
                alert("An error occurred: " + error.message);
            }
        });
    </script>
</body>

</html>